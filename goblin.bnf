_digit : '0'-'9' ;
int_lit : _digit { _digit } ;

_alpha : 'a'-'z' | 'A'-'Z' | '_' ;
_alphanum : _alpha | _digit ;
id : _alpha { _alphanum } ;

_ascii_char
    : '\x01' - '\x21'
    | '\x23' - '\x5B'
    | '\x5D' - '\x7F'
;
_unicode_byte
    : '\u0080' - '\uFFFC'
    // skip invalid code point (\uFFFD)
    | '\uFFFE' - '\U0010FFFF'
;
_unicode_char
    : _ascii_char
    | _unicode_byte
;

_escaped_char : '\\' ( _unicode_char | '"' | '\\' ) ;
_char         : _unicode_char | _escaped_char ;

string_lit : '"' { _char } '"' ;
!whitespace : ' ' | '\t' | '\n' | '\r' ;
!comment : '/' '*' {. | '*'} '*' '/' ;


<< import (
    "github.com/aisk/goblin/ast"
) >>


Module
    : Statements                             << ast.NewModule($0) >>
;

Statements
    : empty
    | StatementList
;

StatementList
    : Statement                              << ast.NewStatementList($0) >>
    | StatementList Statement                << ast.AppendStatementList($0, $1) >>
;

Statement
    : Expression
    | Declare
    | Assign
    | If
    | IfElse
    | While
    | Break
    | FunctionDefine
    | Return
;

ExpressionList
    : Expression                             << ast.NewExpressionList($0) >>
    | ExpressionList Expression              << ast.AppendExpressionList($0, $1) >>
;

Expression
    : Expression1
;

Expression1
    : Expression2
    | Expression1 "and" Expression2          << ast.NewBinaryOperation($0, "and", $2) >>
    | Expression1 "or" Expression2           << ast.NewBinaryOperation($0, "or", $2) >>
;

Expression2
    : Expression3
    | Expression2 "+" Expression3            << ast.NewBinaryOperation($0, "+", $2) >>
    | Expression2 "-" Expression3            << ast.NewBinaryOperation($0, "-", $2) >>
;

Expression3
    : Expression4
    | Expression3 "*" Expression4            << ast.NewBinaryOperation($0, "*", $2) >>
    | Expression3 "/" Expression4            << ast.NewBinaryOperation($0, "/", $2) >>
;

Expression4
    : IntegerLiteral
    | StringLiteral
    | TrueLiteral
    | FalseLiteral
    | NilLiteral
    | FunctionCall
    | Identifier
    | "!" Expression4                        << ast.NewUnaryOperation("!", $1) >>
    | "(" Expression ")"                     << $1, nil >>
;

Identifier
    : id                                     << ast.NewIdentifier($0) >>
;

IntegerLiteral
    : int_lit                                << ast.NewIntegerLiteral($0) >>
;

StringLiteral
    : string_lit                             << ast.NewStringLiteral($0) >>
;

TrueLiteral
    : "true"                                 << ast.NewTrueLiteral() >>
;

FalseLiteral
    : "false"                                << ast.NewFalseLiteral() >>
;

NilLiteral
    : "nil"                                  << ast.NewNilLiteral() >>
;

FunctionCall
    : id "(" Arguments ")"                   << ast.NewFunctionCall($0, $2) >>
;

Arguments
    : empty
    | ArgumentList
;

ArgumentList
    : Expression                             << ast.NewExpressionList($0) >>
    | ArgumentList "," Expression            << ast.AppendExpressionList($0, $2) >>
;

Declare
    : "var" id "=" Expression                << ast.NewDeclare($1, $3) >>
;

Assign
    : id "=" Expression                      << ast.NewAssign($0, $2) >>
;

Block
    : "{" Statements "}"                     << $1, nil >>
;

Condition
    :  Expression
;

If
    : "if" Condition Block                   << ast.NewIf($1, $2, nil) >>
;

IfElse
    : "if" Condition Block "else" Block      << ast.NewIf($1, $2, $4) >>
    | "if" Condition Block "else" If         << ast.NewIf($1, $2, $4) >>
    | "if" Condition Block "else" IfElse     << ast.NewIf($1, $2, $4) >>
;

While
    : "while" Condition Block                << ast.NewWhile($1, $2) >>
;

Break
    : "break"                                << ast.NewBreak() >>
;

FunctionDefine
    : "func" id "(" ")" Block                << ast.NewFunctionDefine($1, $4) >>
;

Return
    : "return" Expression                    << ast.NewReturn($1) >>
;
